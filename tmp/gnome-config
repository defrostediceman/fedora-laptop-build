#!/bin/bash

# Enhanced GNOME Settings Configurator for bootc
# This script configures GNOME desktop settings and extensions

# Color codes for better output readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Log file for debugging
LOG_FILE="/var/log/gnome-settings.log"
COMPLETION_FILE="/var/tmp/gnome-settings-complete"
LOCK_FILE="/tmp/gnome-settings.lock"

# Check if script is already running
if [ -e "$LOCK_FILE" ] && ps -p $(cat "$LOCK_FILE") > /dev/null; then
    echo "Another instance is already running with PID $(cat "$LOCK_FILE")"
    exit 0
fi

# Create lock file
echo $$ > "$LOCK_FILE"

# Clean up lock file on exit
trap 'rm -f "$LOCK_FILE"' EXIT

# Initialize counters for tracking success/failure
FAILURE_COUNT=0
SUCCESS_COUNT=0
SKIPPED_COUNT=0
FAILURES=()

# Initialize log with detailed system information
{
    echo "==================================================================="
    echo "GNOME settings script started at $(date) for user $USER"
    echo "==================================================================="
    echo "SYSTEM INFORMATION:"
    echo "- Hostname: $(hostname)"
    echo "- Kernel: $(uname -r)"
    echo "- Distribution: $(grep PRETTY_NAME /etc/os-release 2>/dev/null | cut -d= -f2 | tr -d '"' || echo "Unknown")"
    echo "- Desktop Environment: $XDG_CURRENT_DESKTOP"
    echo "- GNOME Shell Version: $(gnome-shell --version 2>/dev/null || echo "Not available")"
    echo "- User: $(whoami) (UID: $(id -u))"
    echo "- Groups: $(groups)"
    echo "- Running as root: $([ "$(id -u)" -eq 0 ] && echo "Yes" || echo "No")"
    echo "==================================================================="
    echo "ENVIRONMENT VARIABLES:"
    echo "- HOME: $HOME"
    echo "- PWD: $(pwd)"
    echo "- DISPLAY: $DISPLAY"
    echo "- DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS"
    echo "- XDG_CURRENT_DESKTOP: $XDG_CURRENT_DESKTOP"
    echo "- XDG_SESSION_TYPE: $XDG_SESSION_TYPE"
    echo "- XDG_DATA_DIRS: $XDG_DATA_DIRS"
    echo "- GNOME_SHELL_SESSION_MODE: $GNOME_SHELL_SESSION_MODE"
    echo "==================================================================="
    echo "PROCESS INFORMATION:"
    echo "- Script PID: $"
    echo "- Parent PID: $PPID"
    echo "- Parent Process: $(ps -p $PPID -o comm=)"
    echo "==================================================================="
    echo "CRITICAL PROCESSES:"
    echo "- gnome-shell: $(pgrep -f gnome-shell >/dev/null && echo "Running" || echo "Not running")"
    echo "- gnome-session: $(pgrep -f gnome-session >/dev/null && echo "Running" || echo "Not running")"
    echo "- dbus-daemon: $(pgrep -f dbus-daemon >/dev/null && echo "Running" || echo "Not running")"
    echo "- gsettings daemon: $(pgrep -f gsettingsd >/dev/null && echo "Running" || echo "Not running")"
    echo "==================================================================="
} | tee -a "$LOG_FILE"

# Function to check if commands exist
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to run a command and log the result with detailed error tracking
run_cmd() {
    local cmd_id=$(date +%s%N | cut -b1-13)  # Unique timestamp ID for this command
    echo -e "\n===== COMMAND [$cmd_id] START: $* =====" | tee -a "$LOG_FILE"
    
    # Capture environment state before command
    echo "Command environment:" | tee -a "$LOG_FILE"
    echo "- User: $(whoami)" | tee -a "$LOG_FILE"
    echo "- PWD: $(pwd)" | tee -a "$LOG_FILE"
    echo "- DISPLAY: $DISPLAY" | tee -a "$LOG_FILE"
    echo "- DBUS_SESSION_BUS_ADDRESS: $DBUS_SESSION_BUS_ADDRESS" | tee -a "$LOG_FILE"
    echo "- XDG_DATA_DIRS: $XDG_DATA_DIRS" | tee -a "$LOG_FILE"
    
    # Run the command and capture output and return status
    local temp_out=$(mktemp)
    local temp_err=$(mktemp)
    
    if "$@" > "$temp_out" 2> "$temp_err"; then
        local ret_val=0
    else
        local ret_val=$?
    fi
    
    # Log stdout and stderr
    echo "Command stdout:" | tee -a "$LOG_FILE"
    cat "$temp_out" | tee -a "$LOG_FILE"
    echo "Command stderr:" | tee -a "$LOG_FILE"
    cat "$temp_err" | tee -a "$LOG_FILE"
    
    # Log result
    if [ $ret_val -eq 0 ]; then
        echo -e "${GREEN}SUCCESS [$cmd_id]: Command completed successfully (exit code: 0)${NC}" | tee -a "$LOG_FILE"
    else
        echo -e "${RED}FAILED [$cmd_id]: Command failed with exit code: $ret_val${NC}" | tee -a "$LOG_FILE"
        
        # Special error handling for common issues
        if grep -q "No such file or directory" "$temp_err"; then
            echo -e "${YELLOW}DIAGNOSIS: File or directory not found${NC}" | tee -a "$LOG_FILE"
        elif grep -q "No such schema" "$temp_err"; then
            echo -e "${YELLOW}DIAGNOSIS: Schema not found - the GNOME component may not be installed${NC}" | tee -a "$LOG_FILE"
        elif grep -q "dconf" "$temp_err"; then
            echo -e "${YELLOW}DIAGNOSIS: dconf error - possible permissions or D-Bus issue${NC}" | tee -a "$LOG_FILE"
        elif grep -q "permission denied" "$temp_err"; then
            echo -e "${YELLOW}DIAGNOSIS: Permission denied error${NC}" | tee -a "$LOG_FILE"
        elif grep -q "DBus.Error" "$temp_err"; then
            echo -e "${YELLOW}DIAGNOSIS: D-Bus communication error - check DBUS_SESSION_BUS_ADDRESS${NC}" | tee -a "$LOG_FILE"
        fi
        
        # Record a tally of failures for summary
        FAILURE_COUNT=$((FAILURE_COUNT+1))
        FAILURES+=("$*")
    fi
    
    echo -e "===== COMMAND [$cmd_id] END =====" | tee -a "$LOG_FILE"
    
    # Clean up temp files
    rm -f "$temp_out" "$temp_err"
    
    return $ret_val
}

# Function to verify GNOME session is running
check_gnome_session() {
    # Try a few different methods to detect GNOME
    if pgrep -f "gnome-shell" > /dev/null; then
        echo -e "${GREEN}GNOME Shell detected${NC}" | tee -a "$LOG_FILE"
        return 0
    elif [ -n "$GNOME_SHELL_SESSION_MODE" ]; then
        echo -e "${GREEN}GNOME session detected via environment${NC}" | tee -a "$LOG_FILE"
        return 0
    elif [ -n "$DESKTOP_SESSION" ] && [[ "$DESKTOP_SESSION" == *"gnome"* ]]; then
        echo -e "${GREEN}GNOME desktop session detected${NC}" | tee -a "$LOG_FILE"
        return 0
    else
        echo -e "${YELLOW}No active GNOME session detected${NC}" | tee -a "$LOG_FILE"
        return 1
    fi
}

# Function to wait for GNOME to be ready
wait_for_gnome() {
    local max_attempts=12
    local count=0
    
    echo "Waiting for GNOME session to be ready..." | tee -a "$LOG_FILE"
    
    while [ $count -lt $max_attempts ]; do
        if check_gnome_session; then
            # Additional check: try a simple gsettings command
            if gsettings get org.gnome.desktop.interface color-scheme &>/dev/null; then
                echo -e "${GREEN}GNOME settings system is accessible${NC}" | tee -a "$LOG_FILE"
                # Add extra delay to ensure full initialization
                sleep 3
                return 0
            fi
        fi
        
        echo "GNOME not ready yet, waiting (attempt $((count+1))/$max_attempts)..." | tee -a "$LOG_FILE"
        sleep 10
        ((count++))
    done
    
    echo -e "${RED}Timed out waiting for GNOME session${NC}" | tee -a "$LOG_FILE"
    return 1
}

# Check if script has already completed successfully
if [ -f "$COMPLETION_FILE" ]; then
    echo -e "${YELLOW}Settings have already been applied. Delete $COMPLETION_FILE to force reapplication.${NC}" | tee -a "$LOG_FILE"
    exit 0
fi

# Ensure environment variables are set properly for gsettings
# These variables are crucial for gsettings to work, especially during boot
ensure_environment() {
    # Check and set XDG environment variables if needed
    if [ -z "$XDG_DATA_DIRS" ]; then
        export XDG_DATA_DIRS="/usr/local/share:/usr/share:/usr/share/gnome"
        echo "Set XDG_DATA_DIRS to $XDG_DATA_DIRS" | tee -a "$LOG_FILE"
    elif [[ "$XDG_DATA_DIRS" != *"/usr/share/gnome"* ]]; then
        export XDG_DATA_DIRS="$XDG_DATA_DIRS:/usr/share/gnome"
        echo "Added /usr/share/gnome to XDG_DATA_DIRS" | tee -a "$LOG_FILE"
    fi
    
    # Check if DBUS_SESSION_BUS_ADDRESS is set
    if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
        # Try to get it from the process environment
        USER_ID=$(id -u)
        DBUS_SESSION=$(grep -z DBUS_SESSION_BUS_ADDRESS /proc/*/environ 2>/dev/null | grep -z "USER=$USER" | head -n 1 | cut -d= -f2-)
        
        if [ -n "$DBUS_SESSION" ]; then
            export DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION"
            echo "Set DBUS_SESSION_BUS_ADDRESS from running process" | tee -a "$LOG_FILE"
        else
            echo -e "${YELLOW}Warning: Could not find DBUS_SESSION_BUS_ADDRESS${NC}" | tee -a "$LOG_FILE"
        fi
    fi
    
    # Ensure DISPLAY is set
    if [ -z "$DISPLAY" ]; then
        export DISPLAY=":0"
        echo "Set DISPLAY to :0" | tee -a "$LOG_FILE"
    fi
}

# Check for required commands
check_requirements() {
    local missing=0
    
    if ! command_exists gsettings; then
        echo -e "${RED}gsettings command not found. Please install gnome-settings-daemon.${NC}" | tee -a "$LOG_FILE"
        missing=1
    fi
    
    # Check if gnome-extensions exists (optional)
    if ! command_exists gnome-extensions; then
        echo -e "${YELLOW}Warning: gnome-extensions command not found. Extension management will be skipped.${NC}" | tee -a "$LOG_FILE"
    fi
    
    if [ $missing -eq 1 ]; then
        echo -e "${RED}Required commands missing. Cannot proceed.${NC}" | tee -a "$LOG_FILE"
        exit 1
    fi
}

# Set up the environment and check requirements
ensure_environment
check_requirements

# Wait for GNOME to be ready
if ! wait_for_gnome; then
    # If GNOME isn't available after waiting, run in background mode
    echo "GNOME session not available. Running in background mode to wait for session..." | tee -a "$LOG_FILE"
    
    # Start a background process to wait for GNOME
    (
        while true; do
            sleep 30
            echo "Checking for GNOME session..." >> "$LOG_FILE"
            if wait_for_gnome; then
                echo "GNOME session now available, proceeding with settings..." >> "$LOG_FILE"
                break
            fi
            echo "GNOME session still not available, will retry in 30 seconds..." >> "$LOG_FILE"
        done
        
        # Call the main part of the script
        apply_settings
        
        # Mark as complete
        echo "GNOME settings script completed at $(date)" >> "$LOG_FILE"
        echo "Completed at $(date)" > "$COMPLETION_FILE"
        
        # Remove lock file
        rm -f "$LOCK_FILE"
    ) &
    
    echo "Process running in background with PID $!. Check $LOG_FILE for progress." | tee -a "$LOG_FILE"
    exit 0
fi

# Main function to apply settings
apply_settings() {
    echo "Applying GNOME settings..." | tee -a "$LOG_FILE"
    
    # Enable extensions if gnome-extensions command is available
    if command_exists gnome-extensions; then
        # Check if extensions are installed before enabling
        EXTENSIONS=(
            "dash-to-dock@micxgx.gmail.com"
            "caffeine@patapon.info"
            "blur-my-shell@aunetx"
        )
        
        for ext in "${EXTENSIONS[@]}"; do
            if gnome-extensions info "$ext" &>/dev/null; then
                run_cmd gnome-extensions enable "$ext"
            else
                echo -e "${YELLOW}Extension not installed: $ext${NC}" | tee -a "$LOG_FILE"
            fi
        done
    fi
    
    # Background and appearance
    run_cmd gsettings set org.gnome.desktop.background picture-uri ""
    run_cmd gsettings set org.gnome.desktop.background picture-uri-dark ""
    run_cmd gsettings set org.gnome.desktop.background primary-color "#000000"
    run_cmd gsettings set org.gnome.desktop.interface color-scheme "prefer-dark"
    run_cmd gsettings set org.gnome.desktop.interface gtk-theme "Adwaita-dark"
    run_cmd gsettings set org.gnome.desktop.interface icon-theme "Adwaita"
    
    # Window management
    run_cmd gsettings set org.gnome.desktop.wm.preferences button-layout "close,minimize,maximize:"
    run_cmd gsettings set org.gnome.desktop.wm.preferences num-workspaces 1
    run_cmd gsettings set org.gnome.desktop.wm.preferences mouse-button-modifier "<Alt>"
    run_cmd gsettings set org.gnome.mutter center-new-windows true
    run_cmd gsettings set org.gnome.desktop.interface enable-animations false
    
    # Nautilus (File manager) settings
    run_cmd gsettings set org.gnome.nautilus.preferences show-hidden-files true
    run_cmd gsettings set org.gnome.nautilus.preferences default-folder-viewer "list-view"
    run_cmd gsettings set org.gnome.nautilus.preferences always-use-location-entry true
    
    # Night light settings
    run_cmd gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
    run_cmd gsettings set org.gnome.settings-daemon.plugins.color night-light-temperature 4000
    run_cmd gsettings set org.gnome.settings-daemon.plugins.color night-light-schedule-automatic true
    
    # Dash to dock settings - only if extension is enabled
    if command_exists gnome-extensions && gnome-extensions info dash-to-dock@micxgx.gmail.com &>/dev/null; then
        # Check if extension is enabled before applying settings
        if gnome-extensions show dash-to-dock@micxgx.gmail.com 2>/dev/null | grep -q "State: ENABLED"; then
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock dock-position 'BOTTOM'
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock apply-custom-theme true
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top true
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock show-trash true
            run_cmd gsettings set org.gnome.shell.extensions.dash-to-dock show-mounts-only-mounted true
        else
            echo -e "${YELLOW}Dash to Dock extension not enabled, skipping its settings${NC}" | tee -a "$LOG_FILE"
        fi
    fi
    
    # Power settings
    run_cmd gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 1800
    run_cmd gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 900
    run_cmd gsettings set org.gnome.settings-daemon.plugins.power power-button-action 'suspend'
    # run_cmd gsettings set org.gnome.settings-daemon.plugins.power power-mode 'performance'
    
    # Session idle settings
    run_cmd gsettings set org.gnome.desktop.session idle-delay 300
    
    # Touchpad settings
    run_cmd gsettings set org.gnome.desktop.peripherals.touchpad tap-to-click true
    run_cmd gsettings set org.gnome.desktop.peripherals.touchpad natural-scroll false
    run_cmd gsettings set org.gnome.desktop.peripherals.touchpad disable-while-typing true
    
    # Workspace settings
    run_cmd gsettings set org.gnome.mutter workspaces-only-on-primary false
    
    # Set favorite applications - verify they exist first
    # Create an array of desktop files
    FAVORITES=(
        "org.gnome.Nautilus.desktop"
        "org.gnome.Settings.desktop"
        "me.proton.Pass.desktop"
        "org.signal.Signal.desktop"
        "org.gnome.Ptyxis.desktop"
        "cursor.desktop"
        "org.mozilla.firefox.desktop"
    )
    
    # Filter out desktop files that don't exist
    VALID_FAVORITES=()
    for app in "${FAVORITES[@]}"; do
        if [ -f "/usr/share/applications/$app" ] || [ -f "$HOME/.local/share/applications/$app" ]; then
            VALID_FAVORITES+=("'$app'")
        else
            echo -e "${YELLOW}Application not found: $app, removing from favorites${NC}" | tee -a "$LOG_FILE"
        fi
    done
    
    # Join the array elements with commas
    if [ ${#VALID_FAVORITES[@]} -gt 0 ]; then
        FAVORITES_STRING="[$(IFS=", "; echo "${VALID_FAVORITES[*]}")]"
        run_cmd gsettings set org.gnome.shell favorite-apps "$FAVORITES_STRING"
    else
        echo -e "${YELLOW}No valid favorite applications found${NC}" | tee -a "$LOG_FILE"
    fi
}

# Test GNOME settings availability before proceeding
echo "Testing gsettings availability..." | tee -a "$LOG_FILE"
if ! gsettings get org.gnome.desktop.interface color-scheme &>/dev/null; then
    echo -e "${RED}WARNING: gsettings command failed initial test. This could indicate problems.${NC}" | tee -a "$LOG_FILE"
    echo "Performing extended diagnostics:" | tee -a "$LOG_FILE"
    
    # Check if dconf is working
    if ! dconf read /org/gnome/desktop/interface/color-scheme &>/dev/null; then
        echo -e "${RED}dconf read command failed - possible dconf service issue${NC}" | tee -a "$LOG_FILE"
    fi
    
    # Check if schema is available
    if ! gsettings list-schemas | grep -q org.gnome.desktop.interface; then
        echo -e "${RED}Schema org.gnome.desktop.interface not found - possible schema compilation issue${NC}" | tee -a "$LOG_FILE"
    fi
    
    # Check D-Bus connectivity
    if dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply /org/freedesktop/DBus org.freedesktop.DBus.ListNames &>/dev/null; then
        echo -e "${GREEN}D-Bus session connection successful${NC}" | tee -a "$LOG_FILE"
    else
        echo -e "${RED}D-Bus session connection failed${NC}" | tee -a "$LOG_FILE"
    fi
    
    # Continue with caution
    echo -e "${YELLOW}Will attempt to apply settings despite potential issues...${NC}" | tee -a "$LOG_FILE"
else
    echo -e "${GREEN}gsettings is working properly${NC}" | tee -a "$LOG_FILE"
fi

# Call the main function
echo -e "\n==================================================================" | tee -a "$LOG_FILE"
echo "BEGINNING SETTINGS APPLICATION" | tee -a "$LOG_FILE"
echo "==================================================================" | tee -a "$LOG_FILE"
apply_settings

# Update counters for summary
SUCCESS_COUNT=$(($(grep -c "SUCCESS" "$LOG_FILE")))
FAILURE_COUNT=$(($(grep -c "FAILED" "$LOG_FILE")))
SKIPPED_COUNT=$(($(grep -c "skipping" "$LOG_FILE")))

# Generate detailed summary report
{
    echo "==================================================================="
    echo "GNOME SETTINGS SCRIPT EXECUTION SUMMARY"
    echo "==================================================================="
    echo "Completed at: $(date)"
    echo "Total execution time: $SECONDS seconds"
    echo "==================================================================="
    echo "COMMAND STATISTICS:"
    echo "- Successful operations: $SUCCESS_COUNT"
    echo "- Failed operations: $FAILURE_COUNT"
    echo "- Skipped operations: $SKIPPED_COUNT"
    echo "- Total operations: $((SUCCESS_COUNT + FAILURE_COUNT + SKIPPED_COUNT))"
    echo "- Success rate: $(( (SUCCESS_COUNT * 100) / (SUCCESS_COUNT + FAILURE_COUNT) ))%"
    
    if [ $FAILURE_COUNT -gt 0 ]; then
        echo "==================================================================="
        echo "FAILED COMMANDS:"
        for i in "${!FAILURES[@]}"; do
            echo "  $((i+1)). ${FAILURES[$i]}"
        done
    fi
    
    echo "==================================================================="
    echo "TROUBLESHOOTING TIPS:"
    echo "- Check if GNOME session is fully loaded before running"
    echo "- Ensure proper permissions for the current user"
    echo "- Verify DBUS session is properly set up"
    echo "- Check if required GNOME components are installed"
    echo "- Ensure XDG variables are properly set"
    echo "- Try running gsettings commands manually as the same user"
    echo "==================================================================="
    
    # Add trace file reference
    TRACE_FILE="/tmp/gnome-settings-trace-$(date +%Y%m%d-%H%M%S).log"
    cp "$LOG_FILE" "$TRACE_FILE"
    echo "Full trace log copied to: $TRACE_FILE"
    echo "You can review this file for detailed debugging information."
    echo "==================================================================="
    
    # Check for common system-wide issues
    echo "SYSTEM STATUS CHECK:"
    if ! pgrep -f "gnome-shell" >/dev/null; then
        echo "⚠️ WARNING: GNOME Shell is not running!"
    fi
    
    if ! pgrep -f "dbus-daemon" >/dev/null; then
        echo "⚠️ WARNING: D-Bus daemon is not running!"
    fi
    
    if [ -z "$DBUS_SESSION_BUS_ADDRESS" ]; then
        echo "⚠️ WARNING: DBUS_SESSION_BUS_ADDRESS is not set!"
    fi
    
    if ! command -v gsettings >/dev/null 2>&1; then
        echo "⚠️ WARNING: gsettings command not found!"
    fi
    
    if [ $FAILURE_COUNT -eq 0 ]; then
        echo "✅ All operations completed successfully."
    else
        echo "❌ Some operations failed. See the detailed log for more information."
    fi
    echo "==================================================================="
} | tee -a "$LOG_FILE"

# Create a simplified summary for the completion file
{
    echo "GNOME settings applied at $(date)"
    echo "Success: $SUCCESS_COUNT / Failed: $FAILURE_COUNT / Skipped: $SKIPPED_COUNT"
    echo "Full log available at: $LOG_FILE"
    echo "Trace log available at: $TRACE_FILE"
} > "$COMPLETION_FILE"

exit $FAILURE_COUNT  # Exit with number of failures as status code